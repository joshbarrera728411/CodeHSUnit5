First File:
public class RoadTripTester extends ConsoleProgram
{
    public void run()
    {
        RoadTrip rt = new RoadTrip();
        rt.addStop("San Francisco", 37.7833, -122.4167);
        rt.addStop("Los Angeles", 34.052235, -118.243683);
        rt.addStop("Las Vegas", 36.114647, -115.172813);

        
        System.out.println(rt);
        
        System.out.println("Stops: " + rt.getNumberOfStops());
        System.out.println("Total Miles: " + rt.getTripLength());
    }
}

Second File:
import java.util.*;

public class RoadTrip
{
    private ArrayList<GeoLocation> locations;

    public RoadTrip()
    {
        locations = new ArrayList<GeoLocation>();
    }

    public void addStop(String name, double latitude, double longitude)
    {
        GeoLocation location = new GeoLocation(name, latitude, longitude);
        locations.add(location);
    }

    public int getNumberOfStops()
    {
        return locations.size();
    }

    public double getTripLength()
    {
        double totalMiles = 0;
        for (int i = 1; i < locations.size(); i++) {
            GeoLocation current = locations.get(i);
            GeoLocation previous = locations.get(i - 1);
            totalMiles += current.distanceFrom(previous);
        }
        return totalMiles;
    }

    public String toString()
    {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < locations.size(); i++) {
            result.append((i + 1) + ". " + locations.get(i) + "\n");
        }
        return result.toString();
    }
}

Third File:
/*
 * This class stores information about a location on Earth.  Locations are
 * specified using latitude and longitude.  The class includes a method for
 * computing the distance between two locations.
 *
 * This implementation is based off of the example from Stuart Reges at 
 * the University of Washington.
 */

public class GeoLocation 
{
   // Earth radius in miles
    public static final double RADIUS = 3963.1676;  

    private String name;
    private double latitude;
    private double longitude;

    /**
     * Constructs a geo location object with given name, latitude, and longitude
     */
    public GeoLocation(String theName, double theLatitude, double theLongitude) 
    {
        name = theName;
        latitude = theLatitude;
        longitude = theLongitude;
    }

    /**
     * Returns the name of this geo location
     */
    public String getName() 
    {
        return name;
    }

    /**
     * Returns the latitude of this geo location
     */
    public double getLatitude() 
    {
        return latitude;
    }

    /**
     * Returns the longitude of this geo location
     */
    public double getLongitude() 
    {
        return longitude;
    }

    // Returns a string representation of this geo location
    public String toString() 
    {
        return name + " (" + latitude + ", " + longitude + ")";
    }

    // Returns the distance in miles between this geo location and the given
    // other geo location
    public double distanceFrom(GeoLocation other) 
    {
        double lat1 = Math.toRadians(latitude);
        double long1 = Math.toRadians(longitude);
        double lat2 = Math.toRadians(other.latitude);
        double long2 = Math.toRadians(other.longitude);
        // Apply the spherical law of cosines with a triangle composed of the
        // two locations and the north pole
        double theCos = Math.sin(lat1) * Math.sin(lat2) +
            Math.cos(lat1) * Math.cos(lat2) * Math.cos(long1 - long2);
        double arcLength = Math.acos(theCos);
        return arcLength * RADIUS;
    }
}
